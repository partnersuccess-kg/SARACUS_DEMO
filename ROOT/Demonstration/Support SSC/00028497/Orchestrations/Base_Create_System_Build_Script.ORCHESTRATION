{"job":{"components":{"69104":{"id":69104,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":176,"y":-160,"width":32,"height":32,"inputConnectorIDs":[69115],"outputSuccessConnectorIDs":[69119],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Schemas into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nconfig = json.loads(vConfig_Contents)\n\nfor sma in config['schemas']:\n  sma_script = vSMA_Temp.replace(\"||db_name||\", sma['database']).replace(\"||sma_name||\", sma['name']).replace(\"||wh_name||\", vWarehouse).replace(\"||create_role||\", sma['create_role'])\n  vScript = vScript + sma_script + '\\n\\n'\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Schemas added to script\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69105":{"id":69105,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":288,"y":-192,"width":32,"height":32,"inputConnectorIDs":[69119],"outputSuccessConnectorIDs":[69116],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Stages into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nconfig = json.loads(vConfig_Contents)\n\nfor stg in config['stages']:\n  stg_script = vSTG_Temp.replace(\"||stg_name||\", stg['name']).replace(\"||stg_url||\", stg['url']).replace(\"||stg_file_format||\", stg['file_format']).replace(\"||stg_creds||\", stg['credentials']).replace(\"||stg_schema||\", stg['schema']).replace(\"||db_name||\", stg['database']).replace(\"||wh_name||\", vWarehouse).replace(\"||create_role||\", stg['create_role'])\n  vScript = vScript + stg_script + '\\n\\n'\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Stages added to script\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69106":{"id":69106,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":64,"y":-144,"width":32,"height":32,"inputConnectorIDs":[69117],"outputSuccessConnectorIDs":[69115],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Databases into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nconfig = json.loads(vConfig_Contents)\n\nfor db in config['databases']:  \n  db_script = vDB_Temp.replace(\"||db_name||\", db[\"name\"]).replace(\"||db_comment||\", db[\"comment\"]).replace(\"||create_role||\", db[\"create_role\"])\n  vScript = vScript + db_script + '\\n\\n'\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Databases added to script\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69107":{"id":69107,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":400,"y":-224,"width":32,"height":32,"inputConnectorIDs":[69116],"outputSuccessConnectorIDs":[69118],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build File Formats into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nconfig = json.loads(vConfig_Contents)\n\nfor ff in config['file_formats']:\n  ff_script = vFF_Temp.replace(\"||ff_name||\", ff['name']).replace(\"||ff_compression||\", ff['compression']).replace(\"||ff_octal||\", ff['enable_octal']).replace(\"||ff_allow_dup||\", ff['allow_duplicate']).replace(\"||ff_strip_outer||\", ff['strip_outer_array']).replace(\"||ff_strip_nulls||\", ff['strip_null_values']).replace(\"||ff_ignore_utf8_errs||\", ff['ignore_utf8_errors']).replace(\"||ff_null_if||\", ff['null_if']).replace(\"||ff_type||\", ff['type']).replace(\"||ff_schema||\", ff['schema']).replace(\"||db_name||\", ff['database']).replace(\"||wh_name||\", vWarehouse).replace(\"||create_role||\", ff['create_role'])\n  vScript = vScript + ff_script + '\\n\\n'\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Stages added to script\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69108":{"id":69108,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-304,"y":-256,"width":32,"height":32,"inputConnectorIDs":[69151],"outputSuccessConnectorIDs":[69112],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Get Config Contents"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\nimport json\n\n#Parse the S3_Config_Path variable for the various path parts needed\nbucket = S3_Config_FilePath.replace(\"s3://\", \"\") #strip off the s3://\n\nfolder_path = bucket[bucket.index(\"/\")+1:bucket.rfind(\"/\") + 1] #Get folder_path\nfile_to_read = bucket[bucket.rfind(\"/\") + 1:] #Get file name\n\nbucket = bucket[0:bucket.index('/')] #trim up just the bucket \n\n#Instantiate S3 client\ns3 = boto3.client('s3')\n\n#Get config and template files from S3\nconfig_file = s3.get_object(Bucket=bucket, Key=folder_path + file_to_read)\nwh_file = s3.get_object(Bucket=bucket, Key=folder_path + 'Template_Warehouse.txt')\ndb_file = s3.get_object(Bucket=bucket, Key=folder_path + 'Template_Database.txt')\nsma_file = s3.get_object(Bucket=bucket, Key=folder_path + 'Template_Schema.txt')\nstg_file = s3.get_object(Bucket=bucket, Key=folder_path + 'Template_Stage.txt')\nff_file = s3.get_object(Bucket=bucket, Key=folder_path + 'Template_File_Format.txt')\n\n#Get content from config and template files\ncontext.updateVariable('vConfig_Contents', config_file[\"Body\"].read().decode())\ncontext.updateVariable('vWH_Temp', wh_file[\"Body\"].read().decode())\ncontext.updateVariable('vDB_Temp', db_file[\"Body\"].read().decode())\ncontext.updateVariable('vSTG_Temp', stg_file[\"Body\"].read().decode())\ncontext.updateVariable('vFF_Temp', ff_file[\"Body\"].read().decode())\ncontext.updateVariable('vSMA_Temp', sma_file[\"Body\"].read().decode())"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69109":{"id":69109,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-64,"y":-176,"width":32,"height":32,"inputConnectorIDs":[69114],"outputSuccessConnectorIDs":[69117],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Warehouses into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nconfig = json.loads(vConfig_Contents)\n\nfor wh in config['warehouses']:\n  wh_script = vWH_Temp.replace(\"||wh_name||\", wh[\"name\"]).replace(\"||wh_size||\", wh[\"warehouse_size\"]).replace(\"||wh_max_cluster||\", wh[\"max_cluster_count\"]).replace(\"||wh_min_cluster||\", wh[\"min_cluster_count\"]).replace(\"||wh_scaling_policy||\", wh[\"scaling_policy\"]).replace(\"||wh_auto_suspend||\", wh[\"auto_suspend\"]).replace(\"||wh_auto_resume||\", wh[\"auto_resume\"]).replace(\"||wh_init_suspend||\", wh[\"initially_suspended\"]).replace(\"||wh_comment||\", wh[\"comment\"]).replace(\"||create_role||\", wh[\"create_role\"])\n  vScript = vScript + wh_script + '\\n\\n'\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Warehouses added to script\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69110":{"id":69110,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-192,"y":-208,"width":32,"height":32,"inputConnectorIDs":[69112],"outputSuccessConnectorIDs":[69114],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Add Warehouse to run build under"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nvScript = vScript + \"USE WAREHOUSE \" + vWarehouse + \";\\n\\n\"\n\ncontext.updateVariable('vScript', vScript)\n\nprint \"Set warehouse to use for build execution.\""}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69111":{"id":69111,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-400,"y":-256,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[69151],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"69113":{"id":69113,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":512,"y":-256,"width":32,"height":32,"inputConnectorIDs":[69118],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Build Grants into Script"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport json\n\nvScript = \"\"\"\nUSE WAREHOUSE BUILD_WH;\n\nUSE ROLE SYSADMIN;\n\nCREATE OR REPLACE WAREHOUSE BRYAN_EXTRACT\n    WAREHOUSE_SIZE = xsmall\n    MAX_CLUSTER_COUNT = 1\n    MIN_CLUSTER_COUNT = 1\n    SCALING_POLICY = standard\n    AUTO_SUSPEND = 300\n    AUTO_RESUME = true\n    INITIALLY_SUSPENDED = true\n    COMMENT = 'Warehouse for doing the initial EXTRACT from S3 to Snowflake.';\n\nUSE ROLE SYSADMIN;\n\nCREATE OR REPLACE WAREHOUSE BRYAN_STAGE\n    WAREHOUSE_SIZE = xsmall\n    MAX_CLUSTER_COUNT = 1\n    MIN_CLUSTER_COUNT = 1\n    SCALING_POLICY = standard\n    AUTO_SUSPEND = 300\n    AUTO_RESUME = true\n    INITIALLY_SUSPENDED = true\n    COMMENT = 'Warehouse for doing the staging and transformations of Nucelus data in Snowflake.';\n\nUSE ROLE SYSADMIN;\n\nCREATE OR REPLACE WAREHOUSE BRYAN_QUERIES\n    WAREHOUSE_SIZE = xsmall\n    MAX_CLUSTER_COUNT = 1\n    MIN_CLUSTER_COUNT = 1\n    SCALING_POLICY = standard\n    AUTO_SUSPEND = 300\n    AUTO_RESUME = true\n    INITIALLY_SUSPENDED = true\n    COMMENT = 'Warehouse for doing queries of Nucelus data in Snowflake.';\n\nUSE ROLE SYSADMIN;\n\nCREATE OR REPLACE WAREHOUSE BRYAN_INCREMENTAL_LOADS\n    WAREHOUSE_SIZE = xsmall\n    MAX_CLUSTER_COUNT = 1\n    MIN_CLUSTER_COUNT = 1\n    SCALING_POLICY = standard\n    AUTO_SUSPEND = 60\n    AUTO_RESUME = true\n    INITIALLY_SUSPENDED = true\n    COMMENT = 'Warehouse for doing incremental Nucelus data loads into Snowflake.';\n\nUSE ROLE SYSADMIN;\n\nCREATE OR REPLACE DATABASE TEST_BRYAN COMMENT = 'Database for all insurance data.';\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\n\nCREATE OR REPLACE SCHEMA EXTRACT_NUCLEUS_PERSONAL_LINES;\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\n\nCREATE OR REPLACE SCHEMA STAGE_NUCLEUS_PERSONAL_LINES;\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\n\nCREATE OR REPLACE SCHEMA REPORTS;\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\nUSE SCHEMA EXTRACT_NUCLEUS_PERSONAL_LINES;\n\nCREATE OR REPLACE STAGE EXTRACT_NUCLEUS_POLICY_DATA\t\n    url = 's3://nucleus-datalake-dev-us-west-2-data-lake/policy/'\n    file_format = (Type = 'JSON')\n    credentials = (aws_role = 'arn:aws:iam::025658654491:role/EXT_Snowflake_Stage');\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\nUSE SCHEMA EXTRACT_NUCLEUS_PERSONAL_LINES;\n\nCREATE OR REPLACE STAGE EXTRACT_NUCLEUS_ASSETS_DATA\t\n    url = 's3://nucleus-datalake-dev-us-west-2-data-lake/assets/'\n    file_format = (Type = 'JSON')\n    credentials = (aws_role = 'arn:aws:iam::025658654491:role/EXT_Snowflake_Stage');\n\nUSE ROLE SYSADMIN;\nUSE WAREHOUSE BUILD_WH;\nUSE DATABASE TEST_BRYAN;\nUSE SCHEMA EXTRACT_NUCLEUS_PERSONAL_LINES;\n\nCREATE OR REPLACE FILE FORMAT JSON\n\tCOMPRESSION = 'auto'\n\tENABLE_OCTAL = false\n\tALLOW_DUPLICATE = false\n\tSTRIP_OUTER_ARRAY = false\n\tSTRIP_NULL_VALUES = true\n\tIGNORE_UTF8_ERRORS = false\n    NULL_IF = ()\n\tTYPE = json;\n\nUSE ROLE SYSADMIN;\nUSE DATABASE TEST_BRYAN;\nUSE ROLE ACCOUNTADMIN;\nGRANT MONITOR USAGE ON ACCOUNT TO ROLE SYSADMIN;\\n\\n\"\"\"\n\ncontext.updateVariable('vScript', vScript)\nprint vScript"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"69112":{"id":69112,"sourceID":69108,"targetID":69110},"69114":{"id":69114,"sourceID":69110,"targetID":69109},"69115":{"id":69115,"sourceID":69106,"targetID":69104},"69116":{"id":69116,"sourceID":69105,"targetID":69107},"69117":{"id":69117,"sourceID":69109,"targetID":69106},"69118":{"id":69118,"sourceID":69107,"targetID":69113},"69119":{"id":69119,"sourceID":69104,"targetID":69105}},"failureConnectors":{},"unconditionalConnectors":{"69151":{"id":69151,"sourceID":69111,"targetID":69108}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"vConfig_Contents":{"definition":{"name":"vConfig_Contents","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""},"vDB_Temp":{"definition":{"name":"vDB_Temp","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vFF_Temp":{"definition":{"name":"vFF_Temp","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vSMA_Temp":{"definition":{"name":"vSMA_Temp","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vSTG_Temp":{"definition":{"name":"vSTG_Temp","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vScript":{"definition":{"name":"vScript","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vWH_Temp":{"definition":{"name":"vWH_Temp","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"vWarehouse":{"definition":{"name":"vWarehouse","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{"Test":{"definition":{"name":"Test","scope":"BRANCH","definitions":[{"name":"A","type":"TEXT"},{"name":"B","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[{"values":["Value 1","Value 2"]}]}}},"info":{"name":"Base_Create_System_Build_Script","description":"","type":"ORCHESTRATION","tag":"ead55fdf-9b86-486e-bdb9-77fa5007f8ab"}}