{"job":{"components":{"67842":{"id":67842,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":128,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nvSQL = 'SELECT ' + select_sql + '\\n FROM \"' + table_schema + '\".\"' + table_name + '\"'\n\nif not final_sql:\n  CurrSQL = vSQL\nelse:\n  CurrSQL = '\\n UNION ALL \\n' + vSQL\n  \ncontext.updateVariable('final_sql', final_sql + CurrSQL)\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[67802]},"67844":{"id":67844,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":464,"y":-128,"width":32,"height":32,"inputConnectorIDs":[67848],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 1"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nprint final_sql"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67845":{"id":67845,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1896325668,"x":-656,"y":-128,"width":32,"height":32,"inputConnectorIDs":[67803],"outputSuccessConnectorIDs":[67850],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MultiTable Input - Define Metadata"}}}},"visible":true},"2":{"slot":2,"name":"Transformation Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MultiTable Input - Define Metadata"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67846":{"id":67846,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"ITERATE","implementationID":1227580116,"x":128,"y":-128,"width":32,"height":16,"inputConnectorIDs":[67801],"outputSuccessConnectorIDs":[67848],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Table Iterator 0"}}}},"visible":true},"2":{"slot":2,"name":"Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"vw_multitable_${table_pattern}_cols"}}}},"visible":true},"3":{"slot":3,"name":"Column Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"COLUMN_SELECT"},"2":{"slot":2,"type":"STRING","value":"select_sql"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"TABLE_SCHEMA"},"2":{"slot":2,"type":"STRING","value":"table_schema"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"TABLE_NAME"},"2":{"slot":2,"type":"STRING","value":"table_name"}}}},"visible":true},"4":{"slot":4,"name":"Order By","elements":{},"visible":true},"5":{"slot":5,"name":"Break on Failure","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"6":{"slot":6,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"7":{"slot":7,"name":"Concurrency","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sequential"}}}},"visible":true},"8":{"slot":8,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"9":{"slot":9,"name":"Sort","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Ascending"}}}},"visible":true},"999":{"slot":999,"name":"Record Values In Task History","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[67802],"inputIterationConnectorIDs":[]},"67847":{"id":67847,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-864,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67803],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67849":{"id":67849,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1896325668,"x":-208,"y":-128,"width":32,"height":32,"inputConnectorIDs":[67850],"outputSuccessConnectorIDs":[67801],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MultiTable Input - Create vw_multitable_${table_pattern}_cols"}}}},"visible":true},"2":{"slot":2,"name":"Transformation Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MultiTable Input - Create View"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"table_schema"},"2":{"slot":2,"type":"STRING","value":"${table_schema}"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"table_pattern"},"2":{"slot":2,"type":"STRING","value":"${table_pattern}"}}}},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"67801":{"id":67801,"sourceID":67849,"targetID":67846},"67848":{"id":67848,"sourceID":67846,"targetID":67844},"67850":{"id":67850,"sourceID":67845,"targetID":67849}},"failureConnectors":{},"unconditionalConnectors":{"67803":{"id":67803,"sourceID":67847,"targetID":67845}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{"67802":{"id":67802,"sourceID":67846,"targetID":67842}},"noteConnectors":{},"notes":{"67798":{"id":67798,"x":366,"y":-211,"width":254,"height":184,"text":"Prints the \"final_sql\".  You can pass this to a Transformation job and simply use ${final_sql} in a SQL component.","colour":"e6e63c"},"67800":{"id":67800,"x":-752,"y":-213,"width":236,"height":189,"text":"Setup Metadata that defines a \"table pattern\" and the columns to fetch for all tables that match the \"table pattern\".","colour":"e6e63c"},"67840":{"id":67840,"x":47,"y":-212,"width":252,"height":186,"text":"Iterate through each row in the View (one row per table) and construct the final SQL that includes UNION ALL.","colour":"e6e63c"},"67841":{"id":67841,"x":-874,"y":-462,"width":927,"height":190,"text":"**``Purpose``**\n\nExample job that emulates the Redshift Multitable Input component.\n\n**``Job Variables``**\n\nfinal_sql\t- Stores the final generated SQL.  Pass this to a Transformation job and use in a SQL component to emulate Multitable Input.  (NOTE: Behaviour = Shared)\nselect_sql - Stores the column list text for the SQL statement being built.\ntable_name - Stores the table name for the SQL statement being built.\ntable_pattern - Stores the \"table pattern\" that defines the tables to include. Update the default value appropriately.\ntable_schema - Stores the Schema that is used relative to the table_pattern.","colour":"d60000"},"67843":{"id":67843,"x":-389,"y":-216,"width":347,"height":184,"text":"Create a View that is specific to the Table Pattern. The view contains the pieces of a SQL statement for each Table that matches the Table Pattern.","colour":"e6e63c"}},"variables":{"final_sql":{"definition":{"name":"final_sql","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"select_sql":{"definition":{"name":"select_sql","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"\"order_id\",\"order_date\",\"order_total\",cast(null as varchar(255)) as \"new_field\""},"table_name":{"definition":{"name":"table_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"orders_data"},"table_pattern":{"definition":{"name":"table_pattern","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"orders_data"},"table_schema":{"definition":{"name":"table_schema","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"ARAWAN"}},"grids":{}},"info":{"name":"MultiTable Input - Main Orch","description":"","type":"ORCHESTRATION","tag":"e3aefb9e-2587-43fb-827d-801283f52591"}}