{"job":{"components":{"70956":{"id":70956,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":192,"y":0,"width":32,"height":32,"inputConnectorIDs":[70958],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3 as boto\nimport zipfile\nimport time\nimport os\n\n#### TODO:\n#         Variablize source/target file name, path, bucket, filter\n#         Clean-up orphaned files on start? \n#         add try: catch: blocks?\n#         Check for file size and disk space\n######\n\ns3 = boto.resource('s3')\nbucket = s3.Bucket('<<my S3 bucket>>')\nraw_file = 'text_output'\n\n# local file variables\nmetl_dir = '/tmp/'\nmetl_file = 'raw.csv'\nzip_name = raw_file + '.zip'\n\ns3_final_file = 'returned_' + time.strftime('%Y%m%d-%H%M%S') + '.zip'\ns3_target_dir = 'data_dump/working/'\n\nprint('starting S3 zip sequence')\n\n# loop through objects within a specific directory\nfor obj in bucket.objects.filter(Prefix=s3_target_dir):\n  # if the object matches what we are looking for...\n  if raw_file in obj.key:\n    print('file to be zipped: ' + obj.key)\n    s3_source_file = obj.key\n    \n    # download our file \n    bucket.download_file(s3_source_file, metl_dir + metl_file)\n    print('File: ' + s3_source_file + ' saved to: '+ metl_dir + metl_file)\n    \n#let's zip it up\nwith zipfile.ZipFile(metl_dir + zip_name, 'w', compression=zipfile.ZIP_DEFLATED) as myzip:\n    myzip.write(metl_dir + metl_file, metl_file)\n\nprint('zipped: ' + zip_name)\n\n# next push file back to S3 in the same directory\nbucket.upload_file(metl_dir + zip_name, s3_target_dir + s3_final_file)\nprint('Shipped back to S3: ' + s3_target_dir + s3_final_file)\n\n# delete the original file in the S3 bucket?\n\n# remove local files - put this in another script in the case of failure\n# os.remove(metl_dir + metl_file)\n# os.remove(metl_dir + zip_name)\n\n### Helpers ###\n# bucket.objects.all():\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"70959":{"id":70959,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[70958],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"70958":{"id":70958,"sourceID":70959,"targetID":70956}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"Zip","description":null,"type":"ORCHESTRATION","tag":"ba7c44ff-3986-4c86-b9d8-96dfaa391bad"}}